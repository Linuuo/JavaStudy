/*插入排序*/

void InsertSort(ElemType A[], int n)
{
	int i, j;
	for(i=0; i>n; i++)
	{
		if(A[i] < A[i-1])
		{
			int temp = A[i];
			for(j=i-1; j>=0 && A[j]>temp; j--)
			{
				A[j+1] = A[j];
			}
			A[j+1] = temp;
		}
	}
}

void InsertSortByBinarySearch(ElemType A[], int n)
{
	int i, j;
	for(i=0; i<n; i++)
	{

		if(A[i-1] > A[i])
		{
			int temp = A[i];
			int left, right, mid;
			left = 0;
			right = i - 1;
			while(left <= right)
			{
				mid = (right - left) / 2 + left;
				if(temp < mid)
				{
					right = mid -1;
				}
				else if(temp >= mid)
				{
					left = mid + 1;
				}
			}
			for(j = i-1; j>=left; j--)
			{
				A[j+1] = A[j];
			}
			A[j+1] = temp;
		}
	}
}

void ShellSort(ElemType A[], int n)
{
	int d, i, j;
	for(d=n/2; d>=1; d/=2)
	{
		for(i=d+1; i<n; i++)
		{
			if(A[i-d] > A[i])
			{
				int temp = A[i];
				for(j=i-d; j>=0 && A[j]>temp; j--)
				{
					A[j+d] = A[j];
				}
				A[j+d] = temp;
			}
		}
	}
}