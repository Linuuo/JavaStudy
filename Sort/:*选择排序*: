/*选择排序*/
/*简单选择排序*/
void SelectSort(ElemType A[], int n)
{
	int min;
	for(int i=0; i<n-1; i++)
	{
		min = i;
		for(int j=i+1; j<n; j++)
		{
			if(A[j] < A[min])
			{
				min = j;
			}
			if(min != i)
			{
				swap(A[i], A[j]);
			}
		}
	}
}

/*堆排序*/
void BuildMaxHeap(ElemType A[], int len)
{
	for(int i=n/2; i>0; i--)
	{
		HeadAdjust(A, i, len)
	}
}
//非递归实现
void HeadAdjustElemType A[], int k, int len)
{
	A[0] = A[k];
	for(int i=2*k; i<=len; i*=2)
	{
		if(i<len && A[i]<A[i+1])
		{
			i++;
		}
		if(A[0] >= A[i])
		{
			break;
		}
		else
		{
			A[k] = A[i];
			k = i
		}
	}
	A[k] = A[0];
}
//递归实现
void HeadAdjust(ElemType A[], int k, int len)
{
	int max = 2*k;
	if(k*2<len && A[k*2]<A[k*2+1])
	{
		max++;
	}
	if(A[k] < A[max])
	{
		swap(A[k], A[max]);
		HeadAdjust(A, max, len);
	}
	else
	{
		break;
	}
}
void HeadSoet(ElemType A[], int len)
{
	BuildMaxHeap(A, len);
	for(int i=len; i>1; i--)
	{
		swap(A[1], A[i]);
		HeadAdjust(A, 1; i-1);
	}
}